import { SpraypaintBase, ModelConfiguration } from "./model";
import { AttributeOptions } from "./attribute";
import { AssociationFactoryOpts } from "./associations";
declare type ModelDecorator = <M extends typeof SpraypaintBase>(target: M) => M;
declare const ModelDecorator: (config?: Partial<ModelConfiguration> | undefined) => ModelDecorator;
export declare const initModel: (modelClass: typeof SpraypaintBase, config?: Partial<ModelConfiguration> | undefined) => void;
declare const AttrDecoratorFactory: {
    (config?: AttributeOptions): PropertyDecorator;
    (target: SpraypaintBase, propertyKey: string): void;
    (target: typeof SpraypaintBase, propertyKey: string, config?: AttributeOptions): void;
};
declare const HasManyDecoratorFactory: {
    (optsOrType?: string | typeof SpraypaintBase | AssociationFactoryOpts<SpraypaintBase> | undefined): (target: SpraypaintBase, propertyKey: string) => void;
    (target: typeof SpraypaintBase, propertyKey: string, optsOrType?: string | AssociationFactoryOpts<SpraypaintBase> | undefined): void;
};
declare const HasOneDecoratorFactory: {
    (optsOrType?: string | typeof SpraypaintBase | AssociationFactoryOpts<SpraypaintBase> | undefined): (target: SpraypaintBase, propertyKey: string) => void;
    (target: typeof SpraypaintBase, propertyKey: string, optsOrType?: string | AssociationFactoryOpts<SpraypaintBase> | undefined): void;
};
declare const BelongsToDecoratorFactory: {
    (optsOrType?: string | typeof SpraypaintBase | AssociationFactoryOpts<SpraypaintBase> | undefined): (target: SpraypaintBase, propertyKey: string) => void;
    (target: typeof SpraypaintBase, propertyKey: string, optsOrType?: string | AssociationFactoryOpts<SpraypaintBase> | undefined): void;
};
export { ModelDecorator as Model, AttrDecoratorFactory as Attr, HasManyDecoratorFactory as HasMany, HasOneDecoratorFactory as HasOne, BelongsToDecoratorFactory as BelongsTo };
